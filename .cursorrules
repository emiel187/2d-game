# Programming Rules: Pyjama Game

## Overview

This codebase is for a 2D platform game called "Pyjama Game." The game is built using JavaScript and HTML, with Parcel as the bundler. The game features multiple screens, including a welcome screen, game screen, game over screen, high score screen, and level completed screen. The game logic includes initializing the game board, handling player input, updating game state, checking for collisions, and rendering the game board and entities.

## Project Structure

The project is organized into several directories and files, each serving a specific purpose:

- **game/**: Contains the main game logic, assets, screens, levels, and utility functions.
  - **game.js**: Main game logic, including initializing the game board, handling player input, updating game state, and rendering the game board and entities.
  - **assets.js**: Handles loading game assets.
  - **screens/**: Contains different screen modules like welcome screen, game over screen, high score screen, and level completed screen.
  - **levels/**: Contains level-specific configurations and data.
  - **utils/**: Contains utility functions and settings for the game, including theme, date, and canvas utilities.
- **index.html**: The main HTML file that sets up the game container and includes the game script.

## Coding Style

The codebase follows a modular and organized structure, with a focus on readability and maintainability. Key characteristics include:

- **Modularization**: Different functionalities are separated into distinct modules/files.
- **Consistent Naming Conventions**: Variables and functions are named using camelCase, and constants are named using UPPER_SNAKE_CASE.
- **Commenting**: Each file and function includes comments explaining its purpose and functionality.
- **ES6 Features**: The codebase uses modern JavaScript features such as classes, arrow functions, and template literals.

## Actionable Rules for Programming

1. **Modularize Code**: Ensure that each functionality is separated into its own module/file.
2. **Consistent Naming Conventions**: Use camelCase for variables and functions, and UPPER_SNAKE_CASE for constants.
3. **Commenting**: Add comments to explain the purpose and functionality of each file and function.
4. **Use ES6 Features**: Utilize modern JavaScript features for cleaner and more efficient code.
5. **Follow Existing Patterns**: Maintain the existing structure and patterns used in the codebase for consistency.
